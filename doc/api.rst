API documentation
=================
The following functions and classes are part of Flask Storm's public API. All are available directly from the top level namespace ``flask_storm``. Imports from namespaces below ``flask_storm``, such as ``flask_storm.debug`` is not supported and may change across versions.


Extension
---------
.. autoclass:: flask_storm.FlaskStorm
   :members:


Context locals
--------------
.. We can't use autodoc here since Sphinx tries to access the object without a
   Flask application context
.. py:data:: store
   :value: Proxy for FlaskStorm.store

   Shorthand for :attr:`FlaskStorm.store` which does not depend on knowing
   the FlaskStorm instance bound to the current request context. This is the
   prefered method of accessing the Store, since using the
   :attr:`FlaskStorm.store` property directly makes it easy to accidentally
   create circular imports.

.. autofunction:: flask_storm.create_context_local


Tracers
-------
Tracers provide facilities to intercept and read SQL statements generated by Storm. The tracers provided in Flask-Storm are tailored for use in multithreaded environments, and work in conjunction with Flask's contexts.

DebugTracer
~~~~~~~~~~~
.. autoclass:: flask_storm.DebugTracer
   :members:

.. autofunction:: flask_storm.get_debug_queries

RequestTracer
~~~~~~~~~~~~~
.. autoclass:: flask_storm.RequestTracer
   :members:
   :inherited-members:


Utility
-------
.. autofunction:: flask_storm.find_flask_storm
